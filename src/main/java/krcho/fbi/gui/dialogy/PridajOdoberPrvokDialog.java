/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package krcho.fbi.gui.dialogy;

import javax.swing.JOptionPane;
import krcho.fbi.databaza.dao.SposobilostDao;
import krcho.fbi.databaza.tabulky.Isco;
import krcho.fbi.databaza.tabulky.NKRVedomost;
import krcho.fbi.databaza.tabulky.NKRZrucnost;
import krcho.fbi.databaza.tabulky.OdbornaVedomost;
import krcho.fbi.databaza.tabulky.OdbornaZrucnost;
import krcho.fbi.databaza.tabulky.PopisCinnosti;
import krcho.fbi.databaza.tabulky.PozadovanaSposobilost;
import krcho.fbi.databaza.tabulky.PozadovanaVedomost;
import krcho.fbi.databaza.tabulky.PozadovanaZrucnost;
import krcho.fbi.databaza.tabulky.Sposobilost;
import krcho.fbi.gui.tablemodel.IscoModel;
import krcho.fbi.gui.tablemodel.KlasifikaciaZamestnaniaModel;
import krcho.fbi.gui.tablemodel.OdborneSposobilostiModel;
import krcho.fbi.gui.tablemodel.OdborneVedomostiModel;
import krcho.fbi.gui.tablemodel.OdborneZrucnostiModel;
import krcho.fbi.gui.tablemodel.PodrobnaCharakteristikaModel;
import krcho.fbi.gui.tablemodel.PopisCinnostiModel;
import krcho.fbi.gui.tablemodel.PozadovaneSposobilostiModel;
import krcho.fbi.gui.tablemodel.PozadovaneVedomostiModel;
import krcho.fbi.gui.tablemodel.PozadovaneZrucnostiModel;
import krcho.fbi.hibernate.HibernateUtilities;
import org.hibernate.Session;

/**
 *
 * @author Jozef Krcho
 */
public class PridajOdoberPrvokDialog extends javax.swing.JDialog {

    /**
     * Creates new form PodrobnaCharakteristikaDialog
     */
    private static final int SIRKA_ID = 60;
    private long poziciaId;
    private Class trieda;

    public PridajOdoberPrvokDialog(java.awt.Frame parent, boolean modal, long poziciaId, Class trieda) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
        this.trieda = trieda;
        this.poziciaId = poziciaId;

        switch (trieda.getSimpleName()) {
            case "PopisCinnosti":
                this.setTitle("Podrobná charakteristika činnosti");
                pravaTabulka.setModel(new PopisCinnostiModel());
                lavaTabulka.setModel(new PodrobnaCharakteristikaModel(poziciaId));
                pravaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                lavaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                break;
            case "Isco":
                this.setTitle("Klasifikácia zamestnaní");
                pravaTabulka.setModel(new IscoModel());
                lavaTabulka.setModel(new KlasifikaciaZamestnaniaModel(poziciaId));
                pravaTabulka.getColumn("Kod").setMaxWidth(SIRKA_ID);
                lavaTabulka.getColumn("Kod").setMaxWidth(SIRKA_ID);
                break;
            case "OdbornaZrucnost":
                this.setTitle("Požadované zručnosti");
                pravaTabulka.setModel(new OdborneZrucnostiModel());
                lavaTabulka.setModel(new PozadovaneZrucnostiModel(poziciaId));
                pravaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                lavaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                break;
            case "OdbornaVedomost":
                this.setTitle("Požadované vedomosti");
                pravaTabulka.setModel(new OdborneVedomostiModel());
                lavaTabulka.setModel(new PozadovaneVedomostiModel(poziciaId));
                pravaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                lavaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                break;
            case "Sposobilost":
                this.setTitle("Požadované spôsobilosti");
                pravaTabulka.setModel(new OdborneSposobilostiModel());
                lavaTabulka.setModel(new PozadovaneSposobilostiModel(poziciaId));
                pravaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                lavaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                break;
            default:
                throw new AssertionError();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        lavaTabulka = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        pravaTabulka = new javax.swing.JTable();
        pridatButton = new javax.swing.JButton();
        odobratButton = new javax.swing.JButton();
        hotovoButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        vytvorButton = new javax.swing.JButton();
        upravButton = new javax.swing.JButton();
        vymazButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(600, 400));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 200));

        lavaTabulka.setAutoCreateRowSorter(true);
        lavaTabulka.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        lavaTabulka.setMinimumSize(new java.awt.Dimension(150, 150));
        lavaTabulka.setName(""); // NOI18N
        lavaTabulka.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(lavaTabulka);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(200, 200));

        pravaTabulka.setAutoCreateRowSorter(true);
        pravaTabulka.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        pravaTabulka.setMinimumSize(new java.awt.Dimension(150, 150));
        pravaTabulka.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(pravaTabulka);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jScrollPane2, gridBagConstraints);

        pridatButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/obrazky/sipka z 1.png"))); // NOI18N
        pridatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pridatButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(50, 5, 5, 5);
        getContentPane().add(pridatButton, gridBagConstraints);

        odobratButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/obrazky/sipka c 2.png"))); // NOI18N
        odobratButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odobratButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(odobratButton, gridBagConstraints);

        hotovoButton.setText("Hotovo");
        hotovoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hotovoButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(hotovoButton, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        vytvorButton.setText("Vytvor");
        vytvorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vytvorButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(vytvorButton, gridBagConstraints);

        upravButton.setText("Uprav");
        upravButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upravButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(upravButton, gridBagConstraints);

        vymazButton.setText("Vymaž");
        vymazButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vymazButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(vymazButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void odobratButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odobratButtonActionPerformed
        int vybranyRiadok = lavaTabulka.getSelectedRow();
        if (vybranyRiadok >= 0) {
            vybranyRiadok = lavaTabulka.convertRowIndexToModel(vybranyRiadok);
            switch (trieda.getSimpleName()) {
                case "PopisCinnosti":
                    PodrobnaCharakteristikaModel model1 = (PodrobnaCharakteristikaModel) lavaTabulka.getModel();
                    model1.vymazPopisCinnosti(vybranyRiadok);
                    break;
                case "Isco":
                    KlasifikaciaZamestnaniaModel model2 = (KlasifikaciaZamestnaniaModel) lavaTabulka.getModel();
                    model2.vymazKlasifikaciuZamestnaia(vybranyRiadok);
                    break;
                case "OdbornaZrucnost":
                    PozadovaneZrucnostiModel model3 = (PozadovaneZrucnostiModel) lavaTabulka.getModel();
                    model3.vymazPozadovanuZrucnost(vybranyRiadok);
                    break;
                case "OdbornaVedomost":
                    PozadovaneVedomostiModel model4 = (PozadovaneVedomostiModel) lavaTabulka.getModel();
                    model4.vymazPozadovanuVedomost(vybranyRiadok);
                    break;
                case "Sposobilost":
                    PozadovaneSposobilostiModel model5 = (PozadovaneSposobilostiModel) lavaTabulka.getModel();
                    model5.vymazPozadovanuSposobilost(vybranyRiadok);
                    break;
                default:
                    throw new AssertionError();
            }
        }
    }//GEN-LAST:event_odobratButtonActionPerformed

    private void pridatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pridatButtonActionPerformed
        int vybranyRiadok = pravaTabulka.getSelectedRow();
        if (vybranyRiadok >= 0) {
            int modelRiadok = pravaTabulka.convertRowIndexToModel(vybranyRiadok);
            switch (trieda.getSimpleName()) {
                case "PopisCinnosti":
                    PodrobnaCharakteristikaModel model1 = (PodrobnaCharakteristikaModel) lavaTabulka.getModel();
                    PopisCinnostiModel popisCinnostiModel = (PopisCinnostiModel) pravaTabulka.getModel();
                    if (!model1.vlozPopisCinnosti(popisCinnostiModel.getPopisCinnosti(modelRiadok))) {
                        JOptionPane.showMessageDialog(this, "Zvolená činnosť sa už nachádza v činnostiach zvolenej pozície!", "Pozor Zhoda!", JOptionPane.WARNING_MESSAGE);
                    }
                    break;
                case "Isco":
                    KlasifikaciaZamestnaniaModel model2 = (KlasifikaciaZamestnaniaModel) lavaTabulka.getModel();
                    IscoModel iscoModel = (IscoModel) pravaTabulka.getModel();
                    if (!model2.vlozKlasifikaciuZamestnania(iscoModel.getIsco(modelRiadok))) {
                        JOptionPane.showMessageDialog(this, "Zvolená klasifikácia zamestnania sa už nachádza v klasifikáciách zvolenej pozície!", "Pozor Zhoda!", JOptionPane.WARNING_MESSAGE);
                    }
                    break;
                case "OdbornaZrucnost":
                    PozadovaneZrucnostiModel model3 = (PozadovaneZrucnostiModel) lavaTabulka.getModel();
                    if (model3.jeZrucnostVModeli((long) pravaTabulka.getValueAt(vybranyRiadok, 0))) {
                        JOptionPane.showMessageDialog(this, "Zvolená zručnosť sa už nachádza v zručnostiach zvolenej pozície!", "Pozor Zhoda!", JOptionPane.WARNING_MESSAGE);
                        break;
                    }
                    PridajNutnaVyhodnaEkrDialog pridajDialog1 = new PridajNutnaVyhodnaEkrDialog(this, true, trieda);
                    pridajDialog1.setVisible(true);
                    if (pridajDialog1.isZmena()) {
                        PozadovanaZrucnost novaPozadovanaZrucnost = new PozadovanaZrucnost();
                        novaPozadovanaZrucnost.setPoziadavka(pridajDialog1.getPoziadavka());
                        novaPozadovanaZrucnost.setUroven((NKRZrucnost) pridajDialog1.getUroven());
                        OdborneZrucnostiModel odborneZrucnostiModel = (OdborneZrucnostiModel) pravaTabulka.getModel();
                        model3.vlozPozadovanuZrucnost(novaPozadovanaZrucnost, odborneZrucnostiModel.getOdbornaZrucnost(modelRiadok));
                    }
                    break;
                case "OdbornaVedomost":
                    PozadovaneVedomostiModel model4 = (PozadovaneVedomostiModel) lavaTabulka.getModel();
                    if (model4.jeVedomostVModeli((long) pravaTabulka.getValueAt(vybranyRiadok, 0))) {
                        JOptionPane.showMessageDialog(this, "Zvolená vedomosť sa už nachádza vo vedomostiach zvolenej pozície!", "Pozor Zhoda!", JOptionPane.WARNING_MESSAGE);
                        break;
                    }
                    PridajNutnaVyhodnaEkrDialog pridajDialog2 = new PridajNutnaVyhodnaEkrDialog(this, true, trieda);
                    pridajDialog2.setVisible(true);
                    if (pridajDialog2.isZmena()) {
                        PozadovanaVedomost novaPozadovanaVedomost = new PozadovanaVedomost();
                        novaPozadovanaVedomost.setPoziadavka(pridajDialog2.getPoziadavka());
                        novaPozadovanaVedomost.setUroven((NKRVedomost) pridajDialog2.getUroven());
                        OdborneVedomostiModel odborneVedomostiModel = (OdborneVedomostiModel) pravaTabulka.getModel();
                        model4.vlozPozadovanuVedomost(novaPozadovanaVedomost, odborneVedomostiModel.getOdbornaVedomost(modelRiadok));
                    }
                    break;
                case "Sposobilost":
                    PozadovaneSposobilostiModel model5 = (PozadovaneSposobilostiModel) lavaTabulka.getModel();
                    if (model5.jeSposobilostVModeli((long) pravaTabulka.getValueAt(vybranyRiadok, 0))) {
                        JOptionPane.showMessageDialog(this, "Zvolená spôsobilosť sa už nachádza v spôsobilostiach zvolenej pozície!", "Pozor Zhoda!", JOptionPane.WARNING_MESSAGE);
                        break;
                    }
                    PridajNutnaVyhodnaEkrDialog pridajDialog3 = new PridajNutnaVyhodnaEkrDialog(this, true, trieda);
                    pridajDialog3.setVisible(true);
                    if (pridajDialog3.isZmena()) {
                        PozadovanaSposobilost novaPozadovanaSposobilost = new PozadovanaSposobilost();
                        novaPozadovanaSposobilost.setPoziadavka(pridajDialog3.getPoziadavka());
                        OdborneSposobilostiModel odborneSposobilostiModel = (OdborneSposobilostiModel) pravaTabulka.getModel();
                        model5.vlozPozadovanuSposobilost(novaPozadovanaSposobilost, odborneSposobilostiModel.getSposobilost(modelRiadok));
                    }
                    break;
                default:
                    throw new AssertionError();
            }

        }
    }//GEN-LAST:event_pridatButtonActionPerformed

    private void hotovoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hotovoButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_hotovoButtonActionPerformed

    private void vytvorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vytvorButtonActionPerformed
        switch (trieda.getSimpleName()) {
            case "PopisCinnosti":
                PopisCinnosti novyPopis = new PopisCinnosti();
                VytvorUpravDialog dialog1 = new VytvorUpravDialog(this, true, novyPopis, trieda);
                dialog1.setVisible(true);
                if (dialog1.isZmena()) {
                    PopisCinnostiModel model = (PopisCinnostiModel) pravaTabulka.getModel();
                    model.vlozPopisCinnosti(novyPopis);
                }
                break;
            case "Isco":
                Isco noveIsco = new Isco();
                VytvorUpravDialog dialog2 = new VytvorUpravDialog(this, true, noveIsco, trieda);
                dialog2.setVisible(true);
                if (dialog2.isZmena()) {
                    IscoModel model = (IscoModel) pravaTabulka.getModel();
                    model.vlozIsco(noveIsco);
                }
                break;
            case "OdbornaZrucnost":
                OdbornaZrucnost novaZrucnost = new OdbornaZrucnost();
                VytvorUpravDialog dialog3 = new VytvorUpravDialog(this, true, novaZrucnost, trieda);
                dialog3.setVisible(true);
                if (dialog3.isZmena()) {
                    OdborneZrucnostiModel model = (OdborneZrucnostiModel) pravaTabulka.getModel();
                    model.vlozOdbornuZrucnost(novaZrucnost);
                }
                break;
            case "OdbornaVedomost":
                OdbornaVedomost novaVedomost = new OdbornaVedomost();
                VytvorUpravDialog dialog4 = new VytvorUpravDialog(this, true, novaVedomost, trieda);
                dialog4.setVisible(true);
                if (dialog4.isZmena()) {
                    OdborneVedomostiModel model = (OdborneVedomostiModel) pravaTabulka.getModel();
                    model.vlozOdbornuVedomost(novaVedomost);
                }
                break;
            case "Sposobilost":
                Sposobilost novaSposobilost = new Sposobilost("", false);
                VytvorUpravSposobilostDialog dialog5 = new VytvorUpravSposobilostDialog(this, true, novaSposobilost);
                dialog5.setVisible(true);
                if (dialog5.isZmena()) {
                    OdborneSposobilostiModel model = (OdborneSposobilostiModel) pravaTabulka.getModel();
                    model.vlozSposobilost(novaSposobilost);
                    pravaTabulka.setModel(new OdborneSposobilostiModel());
                    pravaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                }
                break;
            default:
                throw new AssertionError();
        }
    }//GEN-LAST:event_vytvorButtonActionPerformed

    private void upravButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upravButtonActionPerformed
        int vybranyRiadok = pravaTabulka.getSelectedRow();
        if (vybranyRiadok >= 0) {
            vybranyRiadok = pravaTabulka.convertRowIndexToModel(vybranyRiadok);
            switch (trieda.getSimpleName()) {
                case "PopisCinnosti":
                    PopisCinnostiModel model1 = (PopisCinnostiModel) pravaTabulka.getModel();
                    PopisCinnosti upravenyPopis = model1.getPopisCinnosti(vybranyRiadok);
                    VytvorUpravDialog dialog1 = new VytvorUpravDialog(this, true, upravenyPopis, trieda);
                    dialog1.setVisible(true);
                    if (dialog1.isZmena()) {
                        model1.upravPopisCinnosti(vybranyRiadok, upravenyPopis.getPopis());
                        pravaTabulka.setModel(new PopisCinnostiModel());
                        pravaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                        lavaTabulka.setModel(new PodrobnaCharakteristikaModel(poziciaId));
                        lavaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                    }
                    break;
                case "Isco":
                    IscoModel model2 = (IscoModel) pravaTabulka.getModel();
                    Isco upraveneIsco = model2.getIsco(vybranyRiadok);
                    VytvorUpravDialog dialog2 = new VytvorUpravDialog(this, true, upraveneIsco, trieda);
                    dialog2.setVisible(true);
                    if (dialog2.isZmena()) {
                        model2.upravIsco(vybranyRiadok, upraveneIsco.getPopis());
                        pravaTabulka.setModel(new IscoModel());
                        pravaTabulka.getColumn("Kod").setMaxWidth(SIRKA_ID);
                        lavaTabulka.setModel(new KlasifikaciaZamestnaniaModel(poziciaId));
                        lavaTabulka.getColumn("Kod").setMaxWidth(SIRKA_ID);
                    }
                    break;
                case "OdbornaZrucnost":
                    OdborneZrucnostiModel model3 = (OdborneZrucnostiModel) pravaTabulka.getModel();
                    OdbornaZrucnost upravenaZrucnost = model3.getOdbornaZrucnost(vybranyRiadok);
                    VytvorUpravDialog dialog3 = new VytvorUpravDialog(this, true, upravenaZrucnost, trieda);
                    dialog3.setVisible(true);
                    if (dialog3.isZmena()) {
                        model3.upravOdbornuZrucnost(vybranyRiadok, upravenaZrucnost.getPopis());
                        lavaTabulka.setModel(new PozadovaneZrucnostiModel(poziciaId));
                        lavaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                    }
                    break;
                case "OdbornaVedomost":
                    OdborneVedomostiModel model4 = (OdborneVedomostiModel) pravaTabulka.getModel();
                    OdbornaVedomost upravenaVedomost = model4.getOdbornaVedomost(vybranyRiadok);
                    VytvorUpravDialog dialog4 = new VytvorUpravDialog(this, true, upravenaVedomost, trieda);
                    dialog4.setVisible(true);
                    if (dialog4.isZmena()) {
                        model4.upravOdbornuVedomost(vybranyRiadok, upravenaVedomost.getPopis());
                        lavaTabulka.setModel(new PozadovaneVedomostiModel(poziciaId));
                        lavaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                    }
                    break;
                case "Sposobilost":
                    OdborneSposobilostiModel model5 = (OdborneSposobilostiModel) pravaTabulka.getModel();
                    Sposobilost upravenaSposobilost = model5.getSposobilost(vybranyRiadok);
                    VytvorUpravSposobilostDialog dialog5 = new VytvorUpravSposobilostDialog(this, true, upravenaSposobilost);
                    dialog5.setVisible(true);
                    if (dialog5.isZmena()) {
                        model5.upravSposobilost(vybranyRiadok, upravenaSposobilost);
                        pravaTabulka.setModel(new OdborneSposobilostiModel());
                        pravaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                        lavaTabulka.setModel(new PozadovaneSposobilostiModel(poziciaId));
                        lavaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                    } else {
                        Session session = HibernateUtilities.getSessionFactory().openSession();
                        SposobilostDao sposobilostDao = new SposobilostDao();
                        sposobilostDao.setSession(session);
                        model5.setSposobilost(vybranyRiadok, sposobilostDao.findById(upravenaSposobilost.getSposobilostId()));
                        session.close();
                    }
                    break;
                default:
                    throw new AssertionError();
            }
        }
    }//GEN-LAST:event_upravButtonActionPerformed

    private void vymazButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vymazButtonActionPerformed
        int vybranyRiadok = pravaTabulka.getSelectedRow();
        if (vybranyRiadok >= 0) {
            vybranyRiadok = pravaTabulka.convertRowIndexToModel(vybranyRiadok);
            switch (trieda.getSimpleName()) {
                case "PopisCinnosti":
                    PopisCinnostiModel model1 = (PopisCinnostiModel) pravaTabulka.getModel();
                    model1.vymazPopisCinnosti(vybranyRiadok);
                    lavaTabulka.setModel(new PodrobnaCharakteristikaModel(poziciaId));
                    lavaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                    break;
                case "Isco":
                    IscoModel model2 = (IscoModel) pravaTabulka.getModel();
                    model2.vymazIsco(vybranyRiadok);
                    lavaTabulka.setModel(new KlasifikaciaZamestnaniaModel(poziciaId));
                    lavaTabulka.getColumn("Kod").setMaxWidth(SIRKA_ID);
                    break;
                case "OdbornaZrucnost":
                    OdborneZrucnostiModel model3 = (OdborneZrucnostiModel) pravaTabulka.getModel();
                    model3.vymazOdbornuZrucnost(vybranyRiadok);
                    lavaTabulka.setModel(new PozadovaneZrucnostiModel(poziciaId));
                    lavaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                    break;
                case "OdbornaVedomost":
                    OdborneVedomostiModel model4 = (OdborneVedomostiModel) pravaTabulka.getModel();
                    model4.vymazOdbornuVedomost(vybranyRiadok);
                    lavaTabulka.setModel(new PozadovaneVedomostiModel(poziciaId));
                    lavaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                    break;
                case "Sposobilost":
                    OdborneSposobilostiModel model5 = (OdborneSposobilostiModel) pravaTabulka.getModel();
                    model5.vymazSposobilost(vybranyRiadok);
                    lavaTabulka.setModel(new PozadovaneSposobilostiModel(poziciaId));
                    lavaTabulka.getColumn("Id").setMaxWidth(SIRKA_ID);
                    break;
                default:
                    throw new AssertionError();
            }
        }
    }//GEN-LAST:event_vymazButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton hotovoButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable lavaTabulka;
    private javax.swing.JButton odobratButton;
    private javax.swing.JTable pravaTabulka;
    private javax.swing.JButton pridatButton;
    private javax.swing.JButton upravButton;
    private javax.swing.JButton vymazButton;
    private javax.swing.JButton vytvorButton;
    // End of variables declaration//GEN-END:variables
}
